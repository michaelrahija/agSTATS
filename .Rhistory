test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
#explore a bit Imb Casa_vendita
library(data.table)
library(dplyr)
library(rvest)
library(romeHousePrices)
if(Sys.info()[4] == "JOSH_LAPTOP"){
workingDir = "~/GitHub/romeHousePrices"
savingDir = "~/../Dropbox/romeHouseData/"
} else if(Sys.info()[4] == "joshuaUbuntuLinux"){
workingDir = "~/Documents/Github/romeHousePrices"
} else if(Sys.info()[4] =="Michaels-MacBook-Pro-2.local"||
Sys.info()[4] == "Michaels-MBP-2.lan"){
workingDir = "~/Dropbox/romeHousePrices/"
savingDir = "~/DropBox/romeHouseData/" #for michael's mac yo
} else {
stop("No directory for current user!")
}
dataFiles = list.files(savingDir, pattern = ".Rdta")
mioFiles = dataFiles[grepl("^Vend_Casa", dataFiles)]
load(paste0(savingDir,mioFiles))
d <- as.data.frame(master)
#########################
##   GENERAL CLEANING  ##
#########################
# REMOVE DUPLICATES
d <- unique(d)
#clean column names
colnames(d) <- gsub("[^a-zA-Z0-9]","",colnames(d))
#randomly sample some rows:
# set.seed(1)
# samp <- sample(1:nrow(master),100)
# d <- d[samp,]
#####################
## clean addresses ##
#####################
#replace addresses on "Roma" with NA
test.i <- d$indirizzo == "Roma"
d$indirizzo[test.i] <- "NA"
####################
## create CAP     ##
####################
d$cap <- gsub(".*, ","",d$indirizzo)
d$cap <- gsub("-.*","",d$cap)
test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
colnames(d)
tab <- d %>% group_by(Locali) %>% summarize(n())
tab
data.frame(tab)
source('~/Dropbox/ad_hoc_R/regression models/Quiz1.R')
.4(1.5)
.4*(1.5)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
(x - mean)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
meanx(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(x~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
num <- sum(x*y)
denom <- sum(x^2)
num/denom
library(datasets)
df <- data(mtcars)
lm(mpg ~ wt, data = mtcars)
.4*(1.5)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
(x - mean)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(x~x)
summary(cars)
data(diamond)
library(ggplot2)
data(diamond)
library(datasets)
data("diamonds")
head(ddiamonds)
head(diamonds)
y <- diamonds$price
x <- diamonds$carat
residuals(lm(y~x))
sum(residuals(lm(y~x)))
res <- residuals(lm(y~x))
mod <- lm(y~x)
mod
yhat <- predict(mod)
res == (yhat - y)
yhat <- predict(mod)
sum(resid(mod) == y - yhat)
install.packages("dict")
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
names = c("Michael Austin Rahija","Lucia Rita Latino")
gsub(pattern = "[Aa-zZ]+ \s", "", names)
gsub(pattern = "[Aa-zZ]+ ", "", names)
gsub(pattern = "[Aa-zZ]+ \s", "", names)
gsub(pattern = "[Aa-zZ]+ \\s", "", names)
gsub(pattern = "[Aa-Zz]+ \s", "", names)
gsub(pattern = "[Aa-Zz]+ \\s", "", names)
gsub(pattern = "[Aa-Zz]+ ", "", names)
gsub(pattern = "[aA-Zz]+ ", "", names)
gsub(pattern = "[aA-Zz]+  ", "", names)
gsub(pattern = "[aA-Zz]+\s  ", "", names)
gsub(pattern = "^[aA-Zz]+ ", "", names)
gsub(pattern = "^[aA-Zz]+ \\s", "", names)
class(names)
gsub(pattern = "^[Aa-Zz]+ \\s", "", names)
gsub(pattern = "^[Aa-Zz]+\\s", "", names)
gsub(pattern = "^[A-Za-z]+\\s", "", names)
gsub(pattern = "\s  [A-Za-z]+", names)
gsub(pattern = "\\s  [A-Za-z]+", names)
gsub(pattern = "\\s  [A-Za-z]+","", names)
gsub(pattern = "\s  [A-Za-z]+", names)
names = gsub(pattern = "^[A-Za-z]+\\s", "", names)
names
gsub(pattern = "\s  [A-Za-z]+", names)
gsub(pattern = "  [A-Za-z]+", names)
gsub(pattern = "  [A-Za-z]+", "",names)
gsub(pattern = "//s [A-Za-z]+", "",names)
gsub(pattern = "//s[A-Za-z]+", "",names)
gsub(pattern = "\\s[A-Za-z]+", "",names)
#create maps
#create maps and figures for analysis
#-- import data and packages
#library(DT)
library(dplyr)
library(ggplot2)
#library(RColorBrewer)
library(maps)
library(countrycode)
#library(scales)
#library(igraph)
library(gisfao)
library(sp)
library(tidyr)
sys <- Sys.info()
if(sys[5] == "x86_64"){
dir = "~/Dropbox/agSTATS" #Mac
data.dir = "~/Dropbox/agSTATS/data/"
} else if (sys[5] == "Michael"){
dir = "C:/Users/Michael/Dropbox/agSTATS"#HOME PC
data.dir = "C:/Users/Michael/Dropbox/agSTATS/data/"
} else if (sys[6]=="Rahija") {
dir = "C:/Users/rahija/Dropbox/agSTATS" #FAO PC
data.dir = "C:/Users/rahija/Dropbox/agSTATS/data/"
} else {
stop("Implement location for current user!")
}
#for Strengthening Agricultural Statistics and Food Security Information in CARD Countries through South-South Cooperation
#change name of cote d'ivoire
#also for "Space Data Management System (SDMS) -  Acquire, Query, Process and Deliver Earth Observation Data and Forest Information Products to Developing Countries." you have global as the country, but allocated country column = 1. Please fix.
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V4.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
if(sum(is.na(data$start)) > 1) stop("Start dates missing!")
if(sum(is.na(data$finish)) > 1) stop("Finish dates are missing!")
#get # of years
for(i in 1:nrow(data)){
data$noYears[i] = length(seq(from = data$start[i],
to = data$finish[i]))
}
#Divide budget by number of years
data$budget <- data$budget/data$noYears
#--------CREATE DF FOR EXPENDITURES BY COUNTRY AND MERGE CENTROIDS
country <- filter(data, assCountry == 1)
#remove emptry columns
test.c <- colnames(country) %in% NA
country <- country[!test.c]
#keep only country, budget and donor
data.d <- select(country, country, budget, donor)
data.d <- filter(data.d, !is.na(budget))
x <- strsplit(data.d$country,",")
data.d$denom <- sapply(x,length)
options(scipen = 999)
data.d$totl <- data.d$budget/data.d$denom
#ADD LETTERS TO REMOVE DUPLICATES! ##
test <- duplicated(data.d$totl)
n <- 1:length(data.d$totl[test])
sam <- sample(letters[1:26], length(n), FALSE)
data.d$totl[test] <- paste0(data.d$totl[test], sam)
if(sum(duplicated(data.d$totl)) > 1 ) print("STOP NAMES DUPLICATED!")
####################################################
names(x) <- data.d$totl
x1 = lapply(names(x), function(name){
data.frame(amount = name,
country = x[[name]])
})
master <- do.call("rbind", x1)
master$country <- as.character(master$country)
##Remove letter used to create unique values
master$amount <- gsub(pattern = "[a-z]+$","",master$amount)
master$amount <- as.numeric(as.character(master$amount))
master$country[master$country == "Cameroun"] <- "Cameroon"
master$country <- countrycode(master$country, origin = "country.name",
destination = "country.name", warn = TRUE)
master <- master %>%
group_by(country) %>%
dplyr::summarize(amount = sum(amount))
#Get data frame w/ polygons and centroids
centroid <- as.data.frame(fao_world_centroids)
centroid <- select(centroid,ADM0_NAME,x,y)
colnames(centroid) <- c("country","clong","clat")
centroid$country <- as.character(centroid$country)
temp <- data.frame(country = c("Cabo Verde","Comoros", "Kiribati", "Tonga", "Maldives"),
clong = c(-23.627155,43.335468,-157.409388,-175.161552,73.5361),
clat = c(15.088946,-11.664959,1.881687,-21.172421,1.97724))
centroid <- rbind(temp,centroid)
centroid$country <- countrycode(centroid$country, origin = "country.name",
destination = "country.name", warn = TRUE)
master <- merge(master,centroid, by = "country", all = TRUE)
master <- filter(master, !is.na(amount))
master <- filter(master, !(country == "India" & clat > 23))
if(sum(duplicated(master$country)) > 0) print("duplicated country!")
fao_world2 = fortify(fao_world)
countryName = fao_world@data
countryName$id = rownames(countryName)
fao_world2 = merge(fao_world2, countryName, by = "id")
#filter data
master.t <- filter(master,!is.na(amount))
fao_world2 <- filter(fao_world2, ADM0_NAME != "Antarctica")
fao_world2 <- arrange(fao_world2,order)
master.t$country  <- gsub("^ +","", master.t$country)
##---CREATE DF FOR DONORS BY COUNTRY AND MERGE
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c$country <- as.character(master.c$country)
master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
#Duplicate rows when there are multiple donors, one for each donor
source("R/sepDonors.R")
master.c <- sepDonors(master.c,
donor.names.only = TRUE)
master.c <- select(master.c,country,donors)
#Final count donors by country
master.c <- master.c %>%
group_by(country) %>%
summarize(donors = length(unique(donors)))
#merge with centroid data frame
master <- merge(master, master.c, all = TRUE)
##--CREATE PLOTS
#set breaks
breaks = c(1000000,2000000,3000000)
names(master)[names(master) == "donors"] <- "Donors"
range = c(1,5)
# if(include.donors == TRUE){
map <- ggplot() +
geom_polygon(data=fao_world2, aes(x=long, y=lat, group = group),colour="darkgrey", fill="white" ) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
geom_point(data=master, aes(x=clong, y=clat, size = amount, fill = Donors),
shape = 21, color = "lightgrey") +
scale_fill_gradient(low = "lightblue", high = "black") +
scale_size(#max_size = 10,
range = c(2,7),
breaks = breaks,
name = "Total Funding \n(million USD)",
labels = c("1", "2",
"3")) +
geom_text(size=4)
#}
# if (include.donors == FALSE){
#   map <-ggplot() +
#     geom_polygon(data=fao_world2, aes(x=long, y=lat, group = group),colour="darkgrey", fill="white" ) +
#     theme_classic() +
#     theme(axis.line = element_blank(),
#           axis.text.x = element_blank(),
#           axis.text.y = element_blank(),
#           axis.ticks = element_blank(),
#           axis.title.x = element_blank(),
#           axis.title.y = element_blank()) +
#     geom_point(data=master, aes(x=clong, y=clat, size = amount),
#                shape = 21, color = "lightgrey", fill = "black") +
#     scale_fill_gradient(low = "lightblue", high = "black") +
#     scale_size(#max_size = 10,
#       range = c(2,7),
#       breaks = breaks,
#       name = "Total Funding \n(million USD)",
#       labels = c("1", "2",
#                  "3")) +
#     geom_text(size=4)
#
#
# }
map
#Donor Flow map
flowMap <- function(data,
include.donors = TRUE){
if(sum(is.na(data$start)) > 1) stop("Start dates missing!")
if(sum(is.na(data$finish)) > 1) stop("Finish dates are missing!")
#get # of years
for(i in 1:nrow(data)){
data$noYears[i] = length(seq(from = data$start[i],
to = data$finish[i]))
}
#Divide budget by number of years
data$budget <- data$budget/data$noYears
#--------CREATE DF FOR EXPENDITURES BY COUNTRY AND MERGE CENTROIDS
country <- filter(data, assCountry == 1)
#remove emptry columns
test.c <- colnames(country) %in% NA
country <- country[!test.c]
#keep only country, budget and donor
data.d <- select(country, country, budget, donor)
data.d <- filter(data.d, !is.na(budget))
x <- strsplit(data.d$country,",")
data.d$denom <- sapply(x,length)
options(scipen = 999)
data.d$totl <- data.d$budget/data.d$denom
#ADD LETTERS TO REMOVE DUPLICATES! ##
test <- duplicated(data.d$totl)
n <- 1:length(data.d$totl[test])
sam <- sample(letters[1:26], length(n), FALSE)
data.d$totl[test] <- paste0(data.d$totl[test], sam)
if(sum(duplicated(data.d$totl)) > 1 ) print("STOP NAMES DUPLICATED!")
####################################################
names(x) <- data.d$totl
x1 = lapply(names(x), function(name){
data.frame(amount = name,
country = x[[name]])
})
master <- do.call("rbind", x1)
master$country <- as.character(master$country)
##Remove letter used to create unique values
master$amount <- gsub(pattern = "[a-z]+$","",master$amount)
master$amount <- as.numeric(as.character(master$amount))
master$country[master$country == "Cameroun"] <- "Cameroon"
master$country <- countrycode(master$country, origin = "country.name",
destination = "country.name", warn = TRUE)
master <- master %>%
group_by(country) %>%
dplyr::summarize(amount = sum(amount))
#Get data frame w/ polygons and centroids
centroid <- as.data.frame(fao_world_centroids)
centroid <- select(centroid,ADM0_NAME,x,y)
colnames(centroid) <- c("country","clong","clat")
centroid$country <- as.character(centroid$country)
temp <- data.frame(country = c("Cabo Verde","Comoros", "Kiribati", "Tonga", "Maldives"),
clong = c(-23.627155,43.335468,-157.409388,-175.161552,73.5361),
clat = c(15.088946,-11.664959,1.881687,-21.172421,1.97724))
centroid <- rbind(temp,centroid)
centroid$country <- countrycode(centroid$country, origin = "country.name",
destination = "country.name", warn = TRUE)
master <- merge(master,centroid, by = "country", all = TRUE)
master <- filter(master, !is.na(amount))
master <- filter(master, !(country == "India" & clat > 23))
if(sum(duplicated(master$country)) > 0) print("duplicated country!")
fao_world2 = fortify(fao_world)
countryName = fao_world@data
countryName$id = rownames(countryName)
fao_world2 = merge(fao_world2, countryName, by = "id")
#filter data
master.t <- filter(master,!is.na(amount))
fao_world2 <- filter(fao_world2, ADM0_NAME != "Antarctica")
fao_world2 <- arrange(fao_world2,order)
master.t$country  <- gsub("^ +","", master.t$country)
##---CREATE DF FOR DONORS BY COUNTRY AND MERGE
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c$country <- as.character(master.c$country)
master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
#Duplicate rows when there are multiple donors, one for each donor
source("R/sepDonors.R")
master.c <- sepDonors(master.c,
donor.names.only = TRUE)
master.c <- select(master.c,country,donors)
#Final count donors by country
master.c <- master.c %>%
group_by(country) %>%
summarize(donors = length(unique(donors)))
#merge with centroid data frame
master <- merge(master, master.c, all = TRUE)
##--CREATE PLOTS
#set breaks
breaks = c(1000000,2000000,3000000)
names(master)[names(master) == "donors"] <- "Donors"
range = c(1,5)
# if(include.donors == TRUE){
ggplot() +
geom_polygon(data=fao_world2, aes(x=long, y=lat, group = group),colour="darkgrey", fill="white" ) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
geom_point(data=master, aes(x=clong, y=clat, size = amount, fill = Donors),
shape = 21, color = "lightgrey") +
scale_fill_gradient(low = "lightblue", high = "black") +
scale_size(#max_size = 10,
range = c(2,7),
breaks = breaks,
name = "Total Funding \n(million USD)",
labels = c("1", "2",
"3")) +
geom_text(size=4)
#}
# if (include.donors == FALSE){
#   map <-ggplot() +
#     geom_polygon(data=fao_world2, aes(x=long, y=lat, group = group),colour="darkgrey", fill="white" ) +
#     theme_classic() +
#     theme(axis.line = element_blank(),
#           axis.text.x = element_blank(),
#           axis.text.y = element_blank(),
#           axis.ticks = element_blank(),
#           axis.title.x = element_blank(),
#           axis.title.y = element_blank()) +
#     geom_point(data=master, aes(x=clong, y=clat, size = amount),
#                shape = 21, color = "lightgrey", fill = "black") +
#     scale_fill_gradient(low = "lightblue", high = "black") +
#     scale_size(#max_size = 10,
#       range = c(2,7),
#       breaks = breaks,
#       name = "Total Funding \n(million USD)",
#       labels = c("1", "2",
#                  "3")) +
#     geom_text(size=4)
#
#
# }
}
flowMap(data = data)
