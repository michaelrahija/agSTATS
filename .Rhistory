country.cols <- paste0("country_",1:20)
separate(donors, donor, into = country.cols,
sep = ",")
separate(donors, country, into = country.cols,
sep = ",")
donors <- removeSelfFunded(data)
donors <- filter(donors, assCountry == 1)
donors <- computeDonorContrib(df = donors)
donors
data.d <- select(data, country, budget, donor)
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c$country <- as.character(master.c$country)
master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
#Duplicate rows when there are multiple donors, one for each donor
source("R/sepDonors.R")
master.c <- sepDonors(df = master.c,
donor.names.only = TRUE)
master.c <- select(master.c,country,donors)
#Final count donors by country
master.c <- master.c %>%
group_by(country) %>%
summarize(donors = length(unique(donors)))
master.c
knitr::kable(master.c)
data.d <- select(data, country, budget, donor)
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c$country <- as.character(master.c$country)
#master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
#Duplicate rows when there are multiple donors, one for each donor
source("R/sepDonors.R")
master.c <- sepDonors(df = master.c,
donor.names.only = TRUE)
master.c <- select(master.c,country,donors)
#Final count donors by country
master.c <- master.c %>%
group_by(country) %>%
summarize(donors = length(unique(donors)))
master.c <- arrange(master.c, donors)
knitr::kable(master.c)
data.d <- select(data, country, budget, donor)
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c
master.c$country <- as.character(master.c$country)
#master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
data.d <- filter(data, assCountry == 1)
data.d <- select(data.d, country, budget, donor)
data.d <- filter(data, assCountry == 1)
data.d <- select(data.d, country, budget, donor)
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c$country <- as.character(master.c$country)
#master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
#Duplicate rows when there are multiple donors, one for each donor
source("R/sepDonors.R")
master.c <- sepDonors(df = master.c,
donor.names.only = TRUE)
master.c <- select(master.c,country,donors)
#Final count donors by country
master.c <- master.c %>%
group_by(country) %>%
summarize(donors = length(unique(donors)))
master.c <- arrange(master.c, donors)
knitr::kable(master.c)
data.d <- filter(data, assCountry == 1)
data.d <- select(data.d, country, budget, donor)
donors <- select(data.d,country,donor)
x <- strsplit(donors$country,",")
names <- donors$donor
test <- data.frame(names = as.character(names), rep = sapply(x,length))
y <- c()
#create vector of donors
for(i in 1:nrow(test)){
temp <- rep(as.character(test[i,1]), times = test[i,2])
y <- append(y,temp)
}
#bind donors w/ unlisted countries
master.c <- data.frame(donors = y, country = unlist(x))
master.c$country <- as.character(master.c$country)
#master.c$country[master.c$country == "Cameroun"] <- "Cameroon"
master.c$country <- countrycode(master.c$country, origin = "country.name",
destination = "country.name", warn = TRUE)
#Duplicate rows when there are multiple donors, one for each donor
source("R/sepDonors.R")
master.c <- sepDonors(df = master.c,
donor.names.only = TRUE)
master.c <- select(master.c,country,donors)
master.c
filter(master.c, country == "Tanzania, United Republic of")
sys <- Sys.info()
if(sys[5] == "x86_64"){
dir = "~/Dropbox/agSTATS" #Mac
data.dir = "~/Dropbox/agSTATS/data/"
} else if (sys[5] == "Michael"){
dir = "C:/Users/Michael/Dropbox/agSTATS"#HOME PC
data.dir = "C:/Users/Michael/Dropbox/agSTATS/data/"
} else if (sys[6]=="Rahija") {
dir = "C:/Users/rahija/Dropbox/agSTATS" #FAO PC
data.dir = "C:/Users/rahija/Dropbox/agSTATS/data/"
} else {
stop("Implement location for current user!")
}
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
ca <- read.csv(paste0(data.dir,"asci_scores.csv"),
stringsAsFactors = FALSE)
ca$country <- countrycode(ca$country, origin = "country.name",
destination = "country.name")
data.d <- filter(data, assCountry == 1)
data.d <- select(data.d, country, budget, donor)
data.d
donors <- removeSelfFunded(data)
donors <- filter(donors, assCountry == 1)
donors <- computeDonorContrib(df = donors)
donors
donors <- select(donors,donor, countries)
donors <- computeDonorContrib(df = donors)
donors <- removeSelfFunded(data)
donors <- filter(donors, assCountry == 1)
donors <- computeDonorContrib(df = donors)
donors <- select(donors,donor, countries)
donors <- removeSelfFunded(data)
donors <- filter(donors, assCountry == 1)
donors <- computeDonorContrib(df = donors)
head(donors)
donors <- select(donors,donor, country)
country.cols <- paste0("country_",1:20)
donors <- separate(donors, country, into = country.cols,
sep = ",")
donors
donors <- gather(donors, country, -donor)
donors <- donors %>%
gather(key, country, -donor)
donoros
donors
donors <- donors %>%
gather(key, country, -donor, na.rm = TRUE)
donoros
donors
colnames(donors)
donors <- removeSelfFunded(data)
donors <- filter(donors, assCountry == 1)
donors <- computeDonorContrib(df = donors)
donors <- select(donors,donor, country)
country.cols <- paste0("country_",1:20)
donors <- separate(donors, country, into = country.cols,
sep = ",")
head(donors)
donors.t <- donors %>%
gather(key, country, na.rm = TRUE)
head(donors.t)
donors.t <- donors %>%
gather(key, country, -donor, na.rm = TRUE)
head(donors.t)
tail(donors.t)
tab <- donors %>%
group_by(country) %>%
summarize(noDonors = length(unique(donor)))
tab <- donors.t %>%
group_by(country) %>%
summarize(noDonors = length(unique(donor)))
tab
tail(tab)
head(donors.t)
tail(donors.t)
sapply(donors.t, class)
tab <- donors.t %>%
group_by(country) %>%
summarize(noDonors = length(unique(donor)))
tab
tail(tab)
data.frame(tab)
#--------CREATE DF FOR EXPENDITURES BY COUNTRY AND MERGE CA score
africa <- filter(data, Region == "Africa" & assCountry == 1)
#Get expenditure data
test.c <- colnames(africa) %in% NA
africa <- africa[!test.c]
data.d <- select(africa, country, budget, donor)
data.d <- filter(data.d, !is.na(budget))
x <- strsplit(data.d$country,",")
data.d$denom <- sapply(x,length)
options(scipen = 999)
data.d$totl <- data.d$budget/data.d$denom
#HACK TO REMOVE DUPS################################
test <- duplicated(data.d$totl)
n <- 1:length(data.d$totl[test])
data.d$totl[test] <- data.d$totl[test] + n/100
####################################################
names(x) <- data.d$totl
x1 = lapply(names(x), function(name){
data.frame(amount = name,
country = x[[name]])
})
master <- do.call("rbind", x1)
master$country <- as.character(master$country)
master$amount <- as.numeric(as.character(master$amount))
master$country <- countrycode(master$country, origin = "country.name",
destination = "country.name", warn = TRUE)
master <- master %>%
group_by(country) %>%
summarize(amount = sum(amount))
master <- merge(master, ca, by.x = "country", by.y = "country",
all = TRUE)
master$country <- countrycode(master$country, origin = "country.name",
destination = "iso3c")
master <- filter(master, !is.na(amount))
master <- filter(master, !is.na(score))
master$score <- as.numeric(master$score)
n = .15
master$score.g[master$score < (mean(master$score) - n*sd(master$score)) &
master$amount < (mean(master$amount) - n*sd(master$amount))] <- "low score, low support"
master$score.g[master$score < (mean(master$score) - n*sd(master$score)) &
master$amount > (mean(master$amount) - n*sd(master$amount))] <- "low score, mid-high support"
master$score.g[master$score > (mean(master$score) - n*sd(master$score)) &
master$amount < 3000000] <- "mid-high score, low support"
master$score.g[master$score > (mean(master$score) - n*sd(master$score)) &
master$amount > 3000000] <- "mid-high score, mid-high support"
master$score.g[is.na(master$score.g)] <- NA
master$amount.mil <- master$amount/1000000
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)")
axis.line = element_line(colour = "black")
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
axis.line = element_line(colour = "black")
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
axis.line(element_line(colour = "black"))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black"))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_x_continuous(limits = c(0,100)) +
scale_y_continuous(limits = c(1,20)))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_x_continuous(limits = c(0,100)) +
scale_y_continuous(limits = c(1,20))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_x_continuous(limits = c(0,20)) +
scale_y_continuous(limits = c(0,100))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black", size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_x_continuous(limits = c(0,20)) +
scale_y_continuous(limits = c(0,100))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black", size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_x_continuous(limits = c(0,15)) +
scale_y_continuous(limits = c(0,75))
ggplot(master, aes(x=amount.mil, y=score)) +
geom_point(aes(col = score.g), size = 5) +
#scale_color_grey(start = .2, end = 1) +
scale_color_manual(values = c("red","lightgrey","darkgrey","black")) +
geom_text(aes(label=country), size = 3, vjust = -.25, hjust = -.25) +
theme(legend.position="bottom",
legend.title = element_blank()) +
guides(colour = guide_legend(override.aes = list(size=5),
nrow = 2, byrow = TRUE)) +
labs(x = "Total Amount Spent in Millions (active 2015)", y = "Country Assessment Score (2013)") +
theme(axis.line = element_line(colour = "black", size = 100),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_x_continuous(limits = c(0,15)) +
scale_y_continuous(limits = c(0,75))
#-- import data and packages
library(dplyr)
library(ggplot2)
library(countrycode)
library(tidyr)
sys <- Sys.info()
if(sys[5] == "x86_64"){
dir = "~/Dropbox/agSTATS" #Mac
data.dir = "~/Dropbox/agSTATS/data/"
} else if (sys[5] == "Michael"){
dir = "C:/Users/Michael/Dropbox/agSTATS"#HOME PC
data.dir = "C:/Users/Michael/Dropbox/agSTATS/data/"
} else if (sys[6]=="Rahija") {
dir = "C:/Users/rahija/Dropbox/agSTATS" #FAO PC
data.dir = "C:/Users/rahija/Dropbox/agSTATS/data/"
} else {
stop("Implement location for current user!")
}
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final_for narrative_V5.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
ca <- read.csv(paste0(data.dir,"asci_scores.csv"),
stringsAsFactors = FALSE)
ca$country <- countrycode(ca$country, origin = "country.name",
destination = "country.name")
data.ass <- data
data.ass$agId <- gsub("\\.[a-z]+","",data$agId)
tab <- data.ass %>%
group_by(projectType) %>%
summarize(noProject = length(unique(agId)))
knitr::kable(tab)
source("R/removeSelfFunded.R")
noself <- removeSelfFunded(data)
tab <- noself %>%
group_by(projectType) %>%
summarize(totalBudget = sum(budget))
knitr::kable(tab)
head(noself)
